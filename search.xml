<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 部署在 GitHub Pages 上的博客绑定自定义域名</title>
      <link href="/posts/409c1e81/"/>
      <url>/posts/409c1e81/</url>
      
        <content type="html"><![CDATA[<h3 id="使用-CNAME-文件"><a href="#使用-CNAME-文件" class="headerlink" title="使用 CNAME 文件"></a>使用 <code>CNAME</code> 文件</h3><p>这种方法适用于使用 <code>xxx.github.io</code> 作为源仓库的情况。</p><h4 id="在-GitHub-仓库中设置"><a href="#在-GitHub-仓库中设置" class="headerlink" title="在 GitHub 仓库中设置"></a>在 GitHub 仓库中设置</h4><ol><li><p><strong>获取你的 GitHub Pages 地址</strong>：<br>你的仓库地址应该是 <code>https://github.com/你的用户名/你的用户名.github.io</code>。你的网站访问地址是 <code>https://你的用户名.github.io</code>。</p></li><li><p><strong>创建 <code>CNAME</code> 文件</strong>：<br>在本地 Hexo 博客目录的 <code>source</code> 文件夹下，创建一个名为 <code>CNAME</code> 的文件（<strong>没有后缀名</strong>，全部大写）。</p><blockquote><p><strong>注意</strong>：如果你使用 Windows 系统，用记事本创建时可能会自动添加 <code>.txt</code> 后缀。请确保在文件夹选项中设置“显示文件扩展名”，然后将文件名确认为 <code>CNAME</code>。</p></blockquote></li><li><p><strong>编辑 <code>CNAME</code> 文件</strong>：<br>在这个文件里，<strong>有且只有一行</strong>，就是你的自定义域名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yourdomain.com</span><br><span class="line">www.yourdomain.com</span><br></pre></td></tr></table></figure><blockquote><p><strong>重要</strong>：你通常只需要选择一个形式，要么是带 <code>www</code> 的，要么是不带 <code>www</code> 的（裸域名）。<strong>推荐只写一个</strong>，例如 <code>www.yourdomain.com</code>。如果你想强制使用不带 <code>www</code> 的，就只写 <code>yourdomain.com</code>。GitHub 会自动为另一个形式做重定向。</p></blockquote></li><li><p><strong>部署 Hexo</strong>：<br>保存文件后，像往常一样生成和部署你的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>这个命令会将 <code>CNAME</code> 文件推送到你的 GitHub 仓库的根目录。</p></li><li><p><strong>在仓库设置中检查（可选但推荐）</strong>：<br>登录 GitHub，进入你的仓库 -&gt; <strong>Settings</strong> -&gt; <strong>Pages</strong>。</p><ul><li>在 <strong>Custom domain</strong> 栏中，你应该能看到你刚设置的域名。如果没有，可以手动输入并点击 <strong>Save</strong>。</li><li><strong>强烈建议勾选下面的 <code>Enforce HTTPS</code></strong> 选项。这会让 GitHub 为你的域名免费提供 SSL 证书，实现 HTTPS 加密访问。这通常在设置域名后一段时间内可用。</li></ul></li></ol><h4 id="在域名注册商-DNS服务商处配置"><a href="#在域名注册商-DNS服务商处配置" class="headerlink" title="在域名注册商&#x2F;DNS服务商处配置"></a>在域名注册商&#x2F;DNS服务商处配置</h4><p>现在你需要告诉全世界：“访问 <code>www.yourdomain.com</code> 时，请去找 <code>你的用户名.github.io</code>”。这是通过添加 DNS 记录实现的。</p><p>这里以常见的 <strong>CNAME 记录</strong>和 <strong>A 记录</strong> 为例进行说明。请登录你的域名管理后台（如阿里云万网、GoDaddy、Cloudflare 等）找到 DNS 管理设置。</p><ul><li><p><strong>场景A：如果你想用 <code>www</code> 子域名（如 <code>www.yourdomain.com</code>）</strong><br>这是最简单的方式。你只需要添加一条 <strong>CNAME 记录</strong>。</p><table><thead><tr><th align="left">记录类型</th><th align="left">主机记录&#x2F;Name</th><th align="left">记录值&#x2F;Value&#x2F;Target</th><th align="left">TTL</th></tr></thead><tbody><tr><td align="left"><code>CNAME</code></td><td align="left"><code>www</code></td><td align="left"><code>你的用户名.github.io</code></td><td align="left">自动&#x2F;默认</td></tr></tbody></table><blockquote><p><strong>解释</strong>：当有人访问 <code>www.yourdomain.com</code> 时，DNS 系统会将其指向 <code>你的用户名.github.io</code>，然后 GitHub 服务器会根据它仓库里的 <code>CNAME</code> 文件来提供对应的博客内容。</p></blockquote></li><li><p><strong>场景B：如果你想用裸域名（如 <code>yourdomain.com</code>）</strong><br>由于 DNS 协议规定，裸域名（<code>@</code>）不能直接设置 CNAME 记录，所以你需要为其添加 <strong>A 记录</strong>，指向 GitHub Pages 的 IP 地址。</p><p><strong>GitHub Pages 的 IP 地址如下（通常推荐设置4个）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>在你的 DNS 设置中添加如下 <strong>A 记录</strong>：</p><table><thead><tr><th align="left">记录类型</th><th align="left">主机记录&#x2F;Name</th><th align="left">记录值&#x2F;Value&#x2F;Target</th><th align="left">TTL</th></tr></thead><tbody><tr><td align="left"><code>A</code></td><td align="left"><code>@</code></td><td align="left"><code>185.199.108.153</code></td><td align="left">自动&#x2F;默认</td></tr><tr><td align="left"><code>A</code></td><td align="left"><code>@</code></td><td align="left"><code>185.199.109.153</code></td><td align="left">自动&#x2F;默认</td></tr><tr><td align="left"><code>A</code></td><td align="left"><code>@</code></td><td align="left"><code>185.199.110.153</code></td><td align="left">自动&#x2F;默认</td></tr><tr><td align="left"><code>A</code></td><td align="left"><code>@</code></td><td align="left"><code>185.199.111.153</code></td><td align="left">自动&#x2F;默认</td></tr></tbody></table><blockquote><p><strong>为了灵活性，GitHub 可能会更改这些 IP，但上述IPs是目前官方推荐且长期稳定的。</strong></p></blockquote></li><li><p><strong>场景C：同时拥有裸域名和www（推荐）</strong><br>这是一种非常专业的做法，让无论用户输入 <code>yourdomain.com</code> 还是 <code>www.yourdomain.com</code> 都能访问，并且通常强制跳转到其中一种。</p><ol><li>按照 <strong>场景B</strong> 为裸域名（<code>@</code>）设置 <strong>A 记录</strong>。</li><li>按照 <strong>场景A</strong> 为 <code>www</code> 子域名设置 <strong>CNAME 记录</strong>。</li><li>在 GitHub 仓库的 <code>CNAME</code> 文件中只写你<strong>首选</strong>的域名（例如 <code>www.yourdomain.com</code>）。GitHub 会自动将另一个域名（<code>yourdomain.com</code>）重定向到首选域名。</li></ol></li></ul><h3 id="直接在-GitHub-仓库设置中填写"><a href="#直接在-GitHub-仓库设置中填写" class="headerlink" title="直接在 GitHub 仓库设置中填写"></a>直接在 GitHub 仓库设置中填写</h3><p>你也可以不在本地创建 <code>CNAME</code> 文件，而是直接在你的 GitHub 仓库的 Settings -&gt; Pages -&gt; Custom domain 里填写你的域名并保存。</p><p><strong>缺点</strong>：每当你执行 <code>hexo d</code> 重新部署后，本地如果没有 <code>CNAME</code> 文件，可能会覆盖掉 GitHub 上的设置，导致自定义域名被清空。因此，<strong>方法一（创建 <code>CNAME</code> 文件）是更可靠和持久的方式</strong>。</p><h3 id="验证和故障排除"><a href="#验证和故障排除" class="headerlink" title="验证和故障排除"></a>验证和故障排除</h3><ol><li><strong>等待 DNS 生效</strong>：DNS 记录更改需要一定时间才能在全球生效（ propagation ），通常几分钟到几小时不等。耐心等待。</li><li><strong>检查 DNS 解析</strong>：在终端（Mac&#x2F;Linux）或命令提示符（Windows）中，使用 <code>ping</code> 命令检查你的域名是否解析到了正确的 IP。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping www.yourdomain.com</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ping yourdomain.com</span><br></pre></td></tr></table></figure>你应该能看到它指向了 <code>github.io</code> 相关的地址或上述的 IP。</li><li><strong>检查 GitHub Pages 设置</strong>：确保仓库 Settings -&gt; Pages 里的 Custom domain 填写正确，并且已经勾选了 <code>Enforce HTTPS</code>。</li><li><strong>检查 <code>CNAME</code> 文件</strong>：访问 <code>https://你的用户名.github.io/CNAME</code> 这个地址，看看输出的内容是不是你的自定义域名。这可以确认文件已成功部署。</li></ol><p>完成以上所有步骤并等待 DNS 生效后，你的自定义域名就应该可以成功访问 Hexo 博客了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客终极优化与进阶指南</title>
      <link href="/posts/d3eb1878/"/>
      <url>/posts/d3eb1878/</url>
      
        <content type="html"><![CDATA[<h4 id="内容创作与管理优化"><a href="#内容创作与管理优化" class="headerlink" title="内容创作与管理优化"></a>内容创作与管理优化</h4><ol><li><p><strong>Front-matter 模板化</strong><br>避免每次手动写入重复的Front-matter字段。在 <code>scaffolds/post.md</code> 中定义模板：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">cover: /images/cover/&#123;&#123; title &#125;&#125;.jpg # 示例，可根据习惯修改</span><br><span class="line">description: &#123;&#123; title &#125;&#125; # 写文章前先临时写一下，写完文章后再修改为真实摘要</span><br><span class="line">toc: true # 根据个人喜好设定默认值</span><br><span class="line"><span class="section">comments: true # 根据个人喜好设定默认值</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>这样 <code>hexo new</code> 命令生成的新文章就会包含这些预设字段。</p></li><li><p><strong>文章摘要控制</strong></p><ul><li><strong>首选方法</strong>：在文章中希望截断的地方插入 <code>&lt;!--more--&gt;</code> 标签。这是最精确的方法。</li><li><strong>备用方法</strong>：在Front-matter中设置 <code>description</code>。如果两者都没有，主题通常会自动截取文章开头部分字符作为摘要，可能导致格式错乱。</li></ul></li><li><p><strong>使用标签插件 (Tag Plugins)</strong><br>Hexo提供了一些内置标签，让内容更丰富：</p><ul><li><strong>引用块</strong>：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line">这是一个警告提示框</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>（注意：此功能需要主题支持，如NexT主题）</li><li><strong>代码块</strong>：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:js %&#125;</span><br><span class="line">console.log(&#x27;Hello Hexo!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></li><li><strong>Pull Quote</strong>:<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">We do not need magic to transform our world. We carry all the power we need inside ourselves already.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>资源管理与图床</strong></p><ul><li><strong>本地资源</strong>：如前所述，使用 <code>post_asset_folder</code> 和 <code>hexo-asset-image</code>。</li><li><strong>强烈推荐：图床</strong>：对于个人博客，尤其是图片多的，强烈建议使用<strong>免费或廉价的图床服务</strong>（如 <a href="https://sm.ms/">SM.MS</a>, <a href="https://imgurl.org/">ImgURL</a>, <a href="https://www.aliyun.com/product/oss">阿里云OSS</a>&#x2F;<a href="https://cloud.tencent.com/product/cos">腾讯云COS</a>）。优点：<ul><li><strong>减轻你的Git仓库负担</strong>，加快克隆和部署速度。</li><li><strong>提升页面加载速度</strong>（图床通常有CDN加速）。</li><li><strong>管理方便</strong>，不再需要处理烦人的路径问题。</li></ul></li><li>使用 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 这类工具可以一键上传图片并获取Markdown链接，极大提升写作效率。</li></ul></li></ol><hr><h4 id="SEO（搜索引擎优化）深度优化"><a href="#SEO（搜索引擎优化）深度优化" class="headerlink" title="SEO（搜索引擎优化）深度优化"></a>SEO（搜索引擎优化）深度优化</h4><ol><li><p><strong>必备插件</strong><br>确保已安装并正确配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save <span class="comment"># 谷歌等搜索引擎</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save <span class="comment"># 百度搜索引擎</span></span><br><span class="line">npm install hexo-generator-feed --save <span class="comment"># RSS订阅</span></span><br></pre></td></tr></table></figure></li><li><p><strong>主配置文件 (<code>_config.yml</code>) 优化</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 站点标题和描述至关重要！</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你的博客名称</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;你的博客副标题&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;这是一个关于Web开发、技术和生活的个人博客。&#x27;</span> <span class="comment"># 用于SEO，尽量简洁有力，包含关键词</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&quot;Hexo, Blog, 技术博客, Web开发&quot;</span> <span class="comment"># 关键词，用逗号分隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL设置</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://yourdomain.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span> <span class="comment"># 使用优化后的永久链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SEO相关</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>提交Sitemap到搜索引擎</strong></p><ul><li><strong>Google Search Console</strong>: 提交 <code>sitemap.xml</code>。</li><li><strong>Baidu站长平台</strong>: 提交 <code>baidusitemap.xml</code>。</li><li><strong>Bing Webmaster Tools</strong>: 提交 <code>sitemap.xml</code>。</li></ul></li><li><p><strong>规范链接 (Canonical Link)</strong><br>确保主题模板的 <code>&lt;head&gt;</code> 中包含以下代码，防止重复内容问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- config.url %&gt;&lt;%- page.canonical_path %&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大多数优质主题已内置此功能。</p></li><li><p><strong>JSON-LD 结构化数据</strong><br>使用结构化数据可以帮助搜索引擎更好地理解内容。可以安装插件或手动添加相关脚本。</p></li></ol><hr><h4 id="性能与速度优化"><a href="#性能与速度优化" class="headerlink" title="性能与速度优化"></a>性能与速度优化</h4><ol><li><p><strong>CDN加速静态资源</strong><br>将主题中的JS、CSS、字体等库文件替换为公共CDN链接，大幅加快加载速度。</p><ul><li><strong>方法</strong>：在主题的配置文件中，通常有 <code>vendors</code> 字段用于配置各个库的CDN地址。可以使用 <a href="https://www.jsdelivr.com/">jsDelivr</a>、<a href="https://cdnjs.com/">cdnjs</a> 等提供的CDN。</li><li><strong>示例 (NexT主题)</strong>：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># 内部版本：vendors: _internal</span></span><br><span class="line">  <span class="comment"># 外部版本：unpkg 或 cdns</span></span><br><span class="line">  <span class="attr">_internal:</span> <span class="string">lib</span></span><br><span class="line">  <span class="attr">jquery:</span> <span class="string">//cdn.jsdelivr.net/npm/jquery@3.6/dist/jquery.min.js</span></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">//cdn.jsdelivr.net/npm/@fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>图片优化</strong></p><ul><li><strong>压缩图片</strong>：在上传前使用 <a href="https://tinypng.com/">TinyPNG</a>、<a href="https://squoosh.app/">Squoosh</a> 等工具压缩图片。</li><li><strong>懒加载 (Lazy Load)</strong>：选择支持图片懒加载的主题，或者自行集成 <code>lozad.js</code> 等库。</li><li><strong>响应式图片</strong>：使用 <code>&lt;img srcset=&quot;...&quot; sizes=&quot;...&quot;&gt;</code> 或 <code>&lt;picture&gt;</code> 元素，确保不同设备加载合适尺寸的图片。</li></ul></li><li><p><strong>生成文件优化</strong></p><ul><li><strong>HTML压缩</strong>：安装 <code>hexo-html-minifier</code> 插件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-html-minifier --save</span><br></pre></td></tr></table></figure></li><li><strong>CSS&#x2F;JS压缩</strong>：许多主题在生产环境下会自动压缩静态资源。</li></ul></li><li><p><strong>服务端优化 (如果你有自己的服务器)</strong></p><ul><li><strong>开启Gzip压缩</strong>：在Nginx等Web服务器配置中开启Gzip，压缩文本文件。</li><li><strong>配置缓存策略</strong>：为静态资源（如图片、CSS、JS）设置较长的缓存时间（如一年），并通过添加文件哈希值来解决更新问题。</li></ul></li></ol><hr><h4 id="维护与自动化"><a href="#维护与自动化" class="headerlink" title="维护与自动化"></a>维护与自动化</h4><ol><li><p><strong>源码备份与多设备同步</strong><br>这是<strong>最重要</strong>的建议之一。</p><ul><li>在GitHub上创建私有仓库（或公有仓库）来存放你的整个Hexo源码（排除 <code>public</code>, <code>node_modules</code>, <code>.deploy_git</code> 等）。</li><li>编写 <code>.gitignore</code> 文件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li><li>换电脑后，只需 <code>git clone</code> 你的源码仓库，然后执行 <code>npm install</code> 即可恢复环境。</li></ul></li><li><p><strong>使用 GitHub Actions 自动化部署</strong><br>实现“git push后自动部署”。在 <code>.github/workflows/deploy.yml</code> 中创建工作流：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>] <span class="comment"># 当向源码分支推送时触发</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;18&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;$&#123;&#123; secrets.GH_NAME &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;$&#123;&#123; secrets.GH_EMAIL &#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          npm run deploy # 或 hexo clean &amp;&amp; hexo g -d</span></span><br></pre></td></tr></table></figure><p>需要在仓库Settings -&gt; Secrets中配置你的 <code>GH_NAME</code>, <code>GH_EMAIL</code> 和部署密钥。</p></li><li><p><strong>定期更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看过时的包</span></span><br><span class="line">npm outdated</span><br><span class="line"><span class="comment"># 更新Hexo核心</span></span><br><span class="line">npm update hexo hexo-cli</span><br><span class="line"><span class="comment"># 更新所有包（谨慎操作，最好先备份）</span></span><br><span class="line">npm update</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="安全与隐私"><a href="#安全与隐私" class="headerlink" title="安全与隐私"></a>安全与隐私</h4><ol><li><p><strong>隐藏私人信息</strong><br>不要在源码中提交任何敏感信息，如第三方服务的API Keys。使用环境变量或GitHub Secrets（在CI&#x2F;CD中）来管理它们。</p></li><li><p><strong>审查第三方脚本</strong><br>谨慎添加第三方JS脚本，如统计、评论、广告等。它们可能会拖慢速度或带来隐私风险。</p></li><li><p><strong>使用 HTTPS</strong><br>GitHub Pages 默认提供HTTPS，确保你的自定义域名也强制开启HTTPS。</p></li></ol><hr><h4 id="高级技巧与陷阱"><a href="#高级技巧与陷阱" class="headerlink" title="高级技巧与陷阱"></a>高级技巧与陷阱</h4><ol><li><p><strong>自定义页面&#x2F;布局</strong><br>使用 <code>hexo new page &quot;about&quot;</code> 创建关于页面后，你可以在 <code>source/about/index.md</code> 的Front-matter中指定一个不同的布局（如果主题支持的话），例如 <code>layout: about</code>。</p></li><li><p><strong>数据文件</strong><br>将常用数据（如友链、项目）放在 <code>source/_data</code> 目录下（如 <code>friends.json</code>），然后在模板中通过 <code>site.data.friends</code> 引用，实现数据与内容的分离。</p></li><li><p><strong>插件冲突</strong><br>一次只安装和测试一个插件，如果遇到问题（如 <code>hexo g</code> 报错），便于定位是哪个插件引起的。</p></li><li><p><strong>渲染器问题</strong><br>如果你需要渲染非标准格式（如 <code>.ejs</code>, <code>.pug</code>），可能需要安装对应的渲染器，例如 <code>npm install hexo-renderer-pug --save</code>。</p></li><li><p><strong>Hexo 如何隐藏文章</strong><br>在站点根目录下执行<code>npm install hexo-hide-posts --save</code>，然后在站点目录下的_config.yml中如下配置：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-hide-posts</span></span><br><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="comment"># 可以改成其他你喜欢的名字</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hidden</span></span><br><span class="line">  <span class="comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span></span><br><span class="line">  <span class="comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line">  <span class="comment"># 留空则默认全部隐藏</span></span><br><span class="line">  <span class="attr">public_generators:</span> []</span><br><span class="line">  <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在文章的属性中定义 hidden: true 即可隐藏文章。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#x27;Hidden Post&#x27;</span></span><br><span class="line"><span class="attr">hidden:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客写作与维护完整指南</title>
      <link href="/posts/788f639a/"/>
      <url>/posts/788f639a/</url>
      
        <content type="html"><![CDATA[<h4 id="核心概念与工作流"><a href="#核心概念与工作流" class="headerlink" title="核心概念与工作流"></a>核心概念与工作流</h4><p>记住这个黄金工作流，它永远不会错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean ; hexo g ; hexo d</span><br></pre></td></tr></table></figure><ol><li><code>hexo clean</code>: 清除缓存文件和已生成的静态文件 (<code>public</code> 文件夹)。<strong>在遇到任何奇怪问题时，首先执行这一步</strong>。</li><li><code>hexo g</code> (generate): 将源文件（Markdown、配置等）生成静态网页。</li><li><code>hexo d</code> (deploy): 将生成的 <code>public</code> 文件夹部署到你设定的仓库（如GitHub Pages）。</li></ol><p><strong>最佳实践</strong>：在写作前后，使用 <code>hexo s</code> (server) 在 <code>http://localhost:4000</code> 本地预览，确认无误后再执行部署命令。</p><hr><h4 id="写作篇"><a href="#写作篇" class="headerlink" title="写作篇"></a>写作篇</h4><ol><li><p><strong>创建新文章</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的新文章标题&quot;</span></span><br></pre></td></tr></table></figure><p>这会在 <code>source/_posts</code> 目录下生成一个 <code>我的新文章标题.md</code> 文件。</p></li><li><p><strong>理解 Front-matter</strong><br>文章最上方的两块 <code>---</code> 之间的区域就是 Front-matter，这是文章的元数据。<strong>非常重要！</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的新文章标题</span>    <span class="comment"># 文章标题，可自由修改</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-10-27 14:00:00</span> <span class="comment"># 创建时间，用于排序</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2023-10-28 09:00:00</span> <span class="comment"># 更新时间（可选），有些主题会显示</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">Hexo</span>, <span class="string">教程</span>]       <span class="comment"># 标签，可用数组或换行 - 的形式</span></span><br><span class="line"><span class="attr">categories:</span> [<span class="string">技术</span>, <span class="string">博客</span>]  <span class="comment"># 分类，具有层级性，只能有一个</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/images/cover.jpg</span> <span class="comment"># 封面图（可选）</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">这篇文章是关于Hexo的详细使用指南。</span> <span class="comment"># 文章摘要（可选），优先于&lt;!--more--&gt;</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span>               <span class="comment"># 是否显示目录 Table of Content（可选）</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span>          <span class="comment"># 是否开启评论（可选）</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><ul><li><strong>分类 vs. 标签</strong>：分类是树状结构（如 <code>技术/前端/JavaScript</code>），标签是扁平的关键词。一篇文章通常有1-2个分类，多个标签。</li><li><strong>摘要</strong>：在文章中插入 <code>&lt;!--more--&gt;</code> 标签，该标签之前的内容会作为摘要显示在首页。</li></ul></li><li><p><strong>文章资源文件夹</strong><br>当文章有很多图片时，管理起来很麻烦。Hexo提供了一个很好的功能。</p><ul><li><strong>开启</strong>：在主配置文件 <code>_config.yml</code> 中设置：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><strong>使用</strong>：当你执行 <code>hexo new &lt;title&gt;</code> 时，会自动在 <code>_posts</code> 下创建一个同名的文件夹。你可以把文章用到的图片都放在这个文件夹里。</li><li><strong>引用</strong>：在文章中引用图片时，使用<strong>相对路径</strong>。<ul><li><strong>推荐插件</strong>：安装 <code>hexo-asset-image</code> 插件来解决路径问题。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装后，你就可以在文章中用Mark语法直接引用：<code>![图片描述](文章标题/image.jpg)</code></p></li></ul></li></ol><hr><h4 id="优化配置篇"><a href="#优化配置篇" class="headerlink" title="优化配置篇"></a>优化配置篇</h4><ol><li><strong>永久链接 (Permalink)</strong><br>默认的链接结构是 <code>:year/:month/:day/:title/</code>，又长又包含中文，对SEO不友好。<br>这是目前非常流行的方式，能完美解决标题变更和中文的问题。你需要安装一个插件。</li></ol><p>   <strong>安装插件</strong> <code>hexo-abbrlink</code><br>      <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></p><p>  <strong>修改配置（# _config.yml）</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br><span class="line"><span class="comment"># 或者使用斜杠形式</span></span><br><span class="line"><span class="comment"># permalink: posts/:abbrlink/</span></span><br><span class="line"><span class="comment">#  abbrlink 配置</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line">  <span class="attr">drafts:</span> <span class="literal">false</span> <span class="comment"># 是否为草稿生成链接(false(default))</span></span><br><span class="line">  <span class="comment"># 生成示例: crc16 &amp; hex: https://post/66c8.html</span></span><br><span class="line">  <span class="comment"># 生成示例: crc32 &amp; hex: https://post/8ddf18c9.html</span></span><br></pre></td></tr></table></figure><ul><li><strong>优点</strong>：<ul><li><strong>永久不变</strong>：无论你如何修改文章标题，其ID都不会变，彻底避免死链。</li><li><strong>URL 短且固定</strong>：长度固定，非常整洁。</li><li><strong>无需担心中文</strong>：根本不需要使用中文标题作为URL。</li></ul></li></ul><ol start="2"><li><p><strong>安装实用插件</strong></p><ul><li><strong>站点地图</strong> (利于搜索引擎收录):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save <span class="comment"># 百度专用</span></span><br></pre></td></tr></table></figure></li><li><strong>文章搜索</strong> (为主题提供本地搜索功能):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><strong>文章字数与阅读统计</strong> (很多主题支持):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></li><li><strong>资源文件处理</strong> (上文已提及):<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><strong>RSS 订阅</strong>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>安装后记得在主配置文件中查看并配置对应插件的选项。</li></ul></li><li><p><strong>主题配置</strong></p><ul><li>主题通常有自己的 <code>_config.yml</code> 文件（可能在 <code>themes/你的主题/</code> 下）。<strong>不要直接修改它</strong>，因为更新主题时会被覆盖。</li><li><strong>正确做法</strong>：在博客根目录的 <code>_config.yml</code> 中，在主题配置部分进行覆盖。或者，更好的方法是创建一个名为 <code>_config.你的主题名.yml</code> 的文件（例如 <code>_config.next.yml</code>），Hexo会自动合并配置。</li></ul></li><li><p><strong>评论系统</strong><br>常见的评论系统有 Valine, Waline, Giscus, Utterances 等。根据你的主题文档进行配置，通常需要注册并获取 <code>appId</code> 和 <code>appKey</code>。</p></li></ol><hr><h4 id="部署篇"><a href="#部署篇" class="headerlink" title="部署篇"></a>部署篇</h4><p>你已经部署成功，但可以做得更好：</p><ol><li><p><strong>使用 Git 分支管理源码</strong></p><ul><li>现状：你的 <code>public</code> 目录（生成的静态文件）被部署到了GitHub的 <code>main</code> 或 <code>gh-pages</code> 分支。</li><li><strong>优化方案</strong>：将你的博客<strong>源码</strong>也推送到GitHub的一个单独分支（如 <code>hexo-source</code>）。</li><li><strong>好处</strong>：换电脑、重装系统后，可以轻松地克隆源码、安装依赖、继续写作。</li><li><strong>步骤</strong>：<ol><li>在代码仓库创建一个新分支 <code>hexo-source</code>。</li><li>将当前整个博客文件夹（除了 <code>public</code>、<code>node_modules</code>、<code>.deploy_git</code> 等）推送到该分支。</li><li>记得在 <code>.gitignore</code> 文件中忽略 <code>public</code>、<code>node_modules</code> 等文件夹。</li></ol></li></ul></li><li><p><strong>自动化部署 (CI&#x2F;CD)</strong><br>你可以使用 GitHub Actions 实现自动部署。每当你向 <code>hexo-source</code> 分支推送代码时，Action 会自动执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> 并部署到页面分支。</p><ul><li>在项目根目录创建 <code>.github/workflows/deploy.yml</code> 文件。</li><li>网上搜索 “Hexo GitHub Actions” 有很多现成模板。</li></ul></li></ol><hr><h4 id="日常维护技巧"><a href="#日常维护技巧" class="headerlink" title="日常维护技巧"></a>日常维护技巧</h4><ol><li><p><strong>更新 Hexo 和插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看过时的包</span></span><br><span class="line">npm outdated</span><br><span class="line"><span class="comment"># 更新所有包 (谨慎操作，最好逐个更新)</span></span><br><span class="line">npm update</span><br><span class="line"><span class="comment"># 或者指定更新</span></span><br><span class="line">npm update hexo hexo-cli</span><br></pre></td></tr></table></figure></li><li><p><strong>备份！备份！备份！</strong></p><ul><li>确保源码已经推送到远程的 <code>hexo-source</code> 分支。</li><li>定期导出你的重要数据（文章Markdown文件）。</li></ul></li><li><p><strong>处理本地搜索</strong><br>如果安装了搜索插件，在主配置文件中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>自定义页面</strong></p><ul><li><strong>关于我</strong> 页面：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>这会在 <code>source/about</code> 目录下创建 <code>index.md</code>，你可以像写文章一样编辑它。</li></ul></li></ol><hr><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li><p><strong>Q: 部署后样式丢失&#x2F;CSS&#x2F;JS 404？</strong></p><ul><li><strong>A</strong>: 检查主配置文件中的 <code>url</code> 和 <code>root</code> 是否配置正确。如果是二级项目（如 <code>username.github.io/repo</code>），<code>root</code> 要设为 <code>/repo/</code>。</li></ul></li><li><p><strong>Q: 本地预览正常，部署后没变化？</strong></p><ul><li><strong>A</strong>: 首先执行 <code>hexo clean</code>，然后重新生成部署。99%的问题能通过清除缓存解决。</li></ul></li><li><p><strong>Q: 想换电脑写博客怎么办？</strong></p><ul><li><strong>A</strong>:<ol><li>在新电脑上安装 Git 和 Node.js。</li><li>克隆你的 <code>hexo-source</code> 分支代码。</li><li>在项目根目录执行 <code>npm install</code> 安装所有依赖。</li><li>然后你就可以正常写作和部署了。</li></ol></li></ul></li><li><p><strong>Q: 图片还是不显示？</strong></p><ul><li><strong>A</strong>: 路径问题是永恒的难题。确保 <code>post_asset_folder: true</code>，并使用了 <code>hexo-asset-image</code> 插件。或者，使用<strong>图床</strong>（如阿里云OSS、腾讯云COS、SM.MS）是更一劳永逸的方案，能极大加快页面加载速度。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
